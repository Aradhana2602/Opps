#include <GL/glut.h>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

const int WIDTH = 500;
const int HEIGHT = 500;

// Define the polygon vertices
const int numVertices = 4;
float vertices[numVertices][2] = {
    {200, 100},
    {100, 200},
    {200, 300},
    {300, 200}
};

// Store fill colors
vector<vector<int>> fillColor(WIDTH, vector<int>(HEIGHT, 0));
int currentColor = 1; // Color index for filling

// Function to initialize the OpenGL context
void init() {
    gluOrtho2D(0, WIDTH, 0, HEIGHT);
    glClearColor(1, 1, 1, 1); // Set background color to white
}

// Function to draw the polygon
void drawPolygon() {
    glColor3f(0, 0, 1); // Blue color for the polygon
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < numVertices; ++i) {
        glVertex2f(vertices[i][0], vertices[i][1]);
    }
    glEnd();
}

// Function to check if a point is inside the polygon
bool isPointInsidePolygon(float x, float y) {
    int i, j;
    bool c = false;
    for (i = 0, j = numVertices - 1; i < numVertices; j = i++) {
        if (((vertices[i][1] > y) != (vertices[j][1] > y)) &&
            (x < (vertices[j][0] - vertices[i][0]) * (y - vertices[i][1]) / (vertices[j][1] - vertices[i][1]) + vertices[i][0]))
            c = !c;
    }
    return c;
}

// Function to draw filled color
void drawFilledPolygon() {
    for (int y = 0; y < HEIGHT; ++y) {
        for (int x = 0; x < WIDTH; ++x) {
            if (fillColor[x][y] == currentColor) {
                glColor3f(1, 0, 0); // Red color for filled area
                glBegin(GL_POINTS);
                glVertex2f(x, y);
                glEnd();
            }
        }
    }
}

// Flood fill algorithm using BFS
void floodFill(int x, int y) {
    if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) return;
    if (fillColor[x][y] != 0) return;

    if (!isPointInsidePolygon(x, y)) return;

    queue<pair<int, int>> q;
    q.push({x, y});
    fillColor[x][y] = currentColor;

    while (!q.empty()) {
        int cx = q.front().first;
        int cy = q.front().second;
        q.pop();

        for (int dx = -1; dx <= 1; dx++) {
            for (int dy = -1; dy <= 1; dy++) {
                if (dx * dy != 0) continue; // Skip diagonal directions

                int nx = cx + dx;
                int ny = cy + dy;
                if (nx >= 0 && nx < WIDTH && ny >= 0 && ny < HEIGHT && fillColor[nx][ny] == 0 && isPointInsidePolygon(nx, ny)) {
                    fillColor[nx][ny] = currentColor;
                    q.push({nx, ny});
                }
            }
        }
    }
}

// Function to handle mouse click events
void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        int y_inverted = HEIGHT - y; // Invert y coordinate for OpenGL

        // Perform flood fill algorithm
        floodFill(x, y_inverted);

        // Redraw the scene
        glutPostRedisplay();
    }
}

// Display function
void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Draw the polygon
    drawPolygon();

    // Draw the filled areas
    drawFilledPolygon();

    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(WIDTH, HEIGHT);
    glutCreateWindow("OpenGL Polygon Fill with Mouse");

    init();
    glutDisplayFunc(display);
    glutMouseFunc(mouse);

    glutMainLoop();
    return 0;
}
