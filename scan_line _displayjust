#include <GL/glut.h>
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cmath>

using namespace std;

int le[500], re[500], flag = 0, m;

// Initialize the OpenGL context
void init() {
    gluOrtho2D(0, 500, 0, 500);
    for (int i = 0; i < 500; i++) {
        le[i] = 500;
        re[i] = 0;
    }
}

// Function to add edges to the edge table
void edge(int x0, int y0, int x1, int y1) {
    if (y1 < y0) {
        swap(y1, y0);
        swap(x1, x0);
    }
    int x = x0;
    int dy = y1 - y0;
    int dx = x1 - x0;
    m = (dx == 0) ? 0 : (dy / dx);  // Handle vertical lines

    for (int y = y0; y < y1; y++) {
        if (x < le[y]) le[y] = x;
        if (x > re[y]) re[y] = x;
        x += m;
    }
}

// Function to draw the polygon and fill it using the scanline algorithm
void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Draw the polygon (triangle)
    glColor3f(0, 0, 1);
    glBegin(GL_LINE_LOOP);
    glVertex2f(200, 100);
    glVertex2f(100, 200);
    glVertex2f(200, 300);
    glVertex2f(300, 200);
    glEnd();

    // Add edges to the edge table
    edge(200, 100, 100, 200);
    edge(100, 200, 200, 300);
    edge(200, 300, 200, 100);

    // Fill the polygon using scanline algorithm
    glColor3f(1, 0, 0);  // Color for filling
    for (int y = 0; y < 500; y++) {
        if (le[y] < re[y]) {
            glBegin(GL_LINES);
            for (int x = le[y]; x <= re[y]; x++) {
                glVertex2f(x, y);
            }
            glEnd();
        }
    }

    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Scanline Polygon Filling");

    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
